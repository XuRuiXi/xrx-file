1、严格来说没有构造函数，只有函数的“构造调用”。一般约定构造函数首字母大写。

2、const a = new function A(){}();
	1）a称为A的实例对象，并且a.__proto__ === A.prototype。但不推荐使用__proto__，因为ES6只要求该属性必须出现在浏览器，导致其他js运行环境可能没有该属性。
		推荐使用Reflect.getPrototypeOf(a)获取a的__proto__属性（setPrototypeOf(获取)）。（注意：基础数据类型number、string、boolean、null、undefined、symbol，
		无法通过Reflect.getPrototypeOf获取原型对象，因为这些基础数据类型不是通过构造函数生成的。但是我们可以通过“ . ”直接访问属性[null和undefined除外]，
	(123).__proto__。这是因为js引擎检测到我们通过“ . ”去访问数据属性时，会将基础数据隐式转换成“包装对象”。例123转换成Number(123)）
	2）a可以继承A.prototype上的方法，是因为当调用a的某个方法时，如果a自身没有该方法，会通过__proto__（A.prototype）往下查找。
		当a.__proto__找不到时会继续查找下一层a.__proto__.__proto__，直到__proto__ === null

3、关于instanceof
	1）检测构造函数的prototype是否出现在实例的原型链上
	2）a instanceof A // true
		'123' instanceof String // false
		因为'123' 是原始数据类型string，并不是String的实例。但是可以调用String的方法，因为javascript引擎在原始数据类型调用方法时，
		会将其临时转换为包装对象，用完销毁。例如'123'.length临时转换为new Srting('123').length